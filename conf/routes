# Routes
#
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /                           @controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

GET     /dashboard                  @controllers.Application.configurations()

GET     /tests                      @controllers.Application.tests(configuration: Option[Configuration] ?= None, status: Option[TestStatus] ?= None, name: Option[String] ?= None, group: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[Sort] ?= None, descending: Option[Boolean] ?= None)
GET     /tests/stale                @controllers.Application.staleTests(configuration: Option[Configuration] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
GET     /tests/deleted              @controllers.Application.deletedTests(page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
POST    /tests/delete               @controllers.Application.deleteTests()
POST    /tests/undelete             @controllers.Application.undeleteTests()

GET     /test/:id                   @controllers.Application.test(id: Id[Test], configuration: Option[Configuration] ?= None, passed: Option[Boolean] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
POST    /test/:id/delete            @controllers.Application.deleteTest(id: Id[Test])
POST    /test/:id/undelete          @controllers.Application.undeleteTest(id: Id[Test])
POST    /test/:id/comment           @controllers.Application.setTestComment(id: Id[Test], configuration: Option[Configuration] ?= None)

GET     /execution/:id              @controllers.Application.execution(id: Id[Execution])
POST    /execution/:id/comment      @controllers.Application.setExecutionComment(id: Id[Execution])
GET     /executions                 @controllers.Application.executions(configuration: Option[Configuration] ?= None, passed: Option[Boolean] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
GET     /executions/logs            @controllers.Application.searchLogs(query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None)

GET     /batch/:id                  @controllers.Application.batch(id: Id[Batch], passed: Option[Boolean] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
POST    /batch/:id/comment          @controllers.Application.setBatchComment(id: Id[Batch])
GET     /batch/:id/log              @controllers.Application.batchLog(id: Id[Batch])
POST    /batch/:id/delete           @controllers.Application.deleteBatch(id: Id[Batch])

GET     /batches                    @controllers.Application.batches(job: Option[CiJobId] ?= None, configuration: Option[Configuration] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
POST    /batches/delete             @controllers.Application.deleteBatches()
 
GET     /systemConfiguration        @controllers.Application.editSystemConfiguration
POST    /systemConfiguration        @controllers.Application.updateSystemConfiguration

GET     /ci                         @controllers.JenkinsController.ciImportSpecs()
GET     /ci/new                     @controllers.JenkinsController.newCiImportSpec()
POST    /ci/new                     @controllers.JenkinsController.createCiImportSpec()
GET     /ci/:id/log                 @controllers.JenkinsController.getCiImportSpec(id: Id[CiImportSpec], page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
GET     /ci/:id/edit                @controllers.JenkinsController.editCiImportSpec(id: Id[CiImportSpec])
POST    /ci/:id/edit                @controllers.JenkinsController.updateCiImportSpec(id: Id[CiImportSpec])
POST    /ci/:id/delete              @controllers.JenkinsController.deleteCiImportSpec(id: Id[CiImportSpec])
POST    /ci/:id/sync                @controllers.JenkinsController.syncJenkins(id: Id[CiImportSpec])

GET     /admin                      @controllers.Application.admin()
POST    /deleteAll                  @controllers.Application.deleteAll()
POST    /analyseAll                 @controllers.Application.analyseAll()

GET     /webApi/tests/names           @controllers.Application.testNames(query: String)
GET     /webApi/tests/groups          @controllers.Application.groups(query: String)
GET     /webApi/configuration/chart   @controllers.Application.configurationChart(configuration: Configuration)

GET     /api/batches                @controllers.JsonController.getBatches()
POST    /api/batches                @controllers.JsonController.addBatch()
POST    /api/deleteAll              @controllers.JsonController.deleteAll()

POST    /api/testing/analyseAllExecutions     @controllers.Application.analyseAllExecutions()

GET     /jenkins/auth               @controllers.JenkinsController.auth()
POST    /jenkins/auth               @controllers.JenkinsController.updateAuth()
GET     /jenkins/reruns             @controllers.JenkinsController.reruns()
POST    /jenkins/reruns             @controllers.JenkinsController.updateReruns()

POST    /jenkins/tests/rerun        @controllers.JenkinsController.rerunSelectedTests()
POST    /jenkins/test/:id/rerun     @controllers.JenkinsController.rerunTest(id: Id[Test])

GET     /teamcity/config            @controllers.JenkinsController.teamCityConfig()
POST    /teamcity/config            @controllers.JenkinsController.updateTeamCityConfig()
